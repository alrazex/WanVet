{"version":3,"file":"2.js","sources":["webpack:///./Client/modules/+appointments/appointments.module.ts","webpack:///./Client/modules/+calendars/calendars.service.ts?d5b7","webpack:///./Client/modules/+appointments/appointments-add/appointments-add.component.ts","webpack:///./Client/modules/+appointments/appointments-home/appointments-home.component.ts","webpack:///./Client/modules/+appointments/appointments-manage/appointments-manage.component.ts","webpack:///./Client/modules/+appointments/appointments.component.ts","webpack:///./Client/modules/+appointments/appointments.service.ts","webpack:///./Client/modules/shared/types/select-option.ts","webpack:///./Client/modules/+appointments/appointments-add/appointments-add.component.html","webpack:///./Client/modules/+appointments/appointments-home/appointments-home.component.html","webpack:///./Client/modules/+appointments/appointments-manage/appointments-manage.component.html","webpack:///./Client/modules/+appointments/appointments.component.html","webpack:///./Client/modules/+appointments/appointments-add/appointments-add.component.scss","webpack:///./Client/modules/+appointments/appointments-home/appointments-home.component.scss","webpack:///./Client/modules/+appointments/appointments-manage/appointments-manage.component.scss","webpack:///./Client/modules/+appointments/appointments.component.scss","webpack:///./Client/modules/+appointments/appointment.model.ts","webpack:///./Client/modules/+appointments/appointments-add/appointments-add.model.ts","webpack:///./Client/modules/+appointments/appointments-manage/appointments-manage.model.ts","webpack:///./Client/modules/+appointments/appointments.routes.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\n\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { InternalRouterModule } from './appointments.routes';\r\nimport { AppointmentsComponent } from \"./appointments.component\";\r\nimport { AppointmentsHomeComponent } from \"./appointments-home/appointments-home.component\";\r\nimport { AppointmentsAddComponent } from \"./appointments-add/appointments-add.component\";\r\nimport { AppointmentsService } from \"./appointments.service\";\r\nimport { CalendarsService } from \"../+calendars/calendars.service\";\r\nimport { AppointmentsManageComponent } from \"./appointments-manage/appointments-manage.component\";\r\n\r\n@NgModule({\r\n    imports: [InternalRouterModule, SharedModule],\r\n    declarations: [\r\n        AppointmentsComponent,\r\n        AppointmentsHomeComponent,\r\n        AppointmentsAddComponent,\r\n        AppointmentsManageComponent\r\n    ],\r\n    providers: [AppointmentsService, CalendarsService]\r\n})\r\nexport class AppointmentsModule { }\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/angular2-router-loader/src!./Client/modules/+appointments/appointments.module.ts","import { Injectable } from '@angular/core';\r\nimport { DataService } from '../shared/services/data.service';\r\nimport { Response } from '@angular/http';\r\nimport { AppointmentAddFormModel } from \"../+appointments/appointments-add/appointments-add.model\";\r\n\r\n@Injectable()\r\nexport class CalendarsService {\r\n\r\n    private calendarsApiUrl: string = 'api/calendars/';\r\n\r\n    constructor(private dataService: DataService) { }\r\n\r\n    get(id: string) {\r\n        return this.dataService.get(this.calendarsApiUrl, { id: id });\r\n    }\r\n\r\n    getFreeSpots(id: string, date: string) {\r\n        return this.dataService.get(this.calendarsApiUrl + 'freespots', { id: id, date: date });\r\n    }\r\n\r\n    checkappointmentdisponibility(appointmentAddFormModel: AppointmentAddFormModel) {\r\n        this.dataService.post(this.calendarsApiUrl + 'checkappointmentdisponibility', appointmentAddFormModel, {})\r\n            .map(response => { return true }).subscribe((response: Boolean) => { });\r\n    }\r\n\r\n    getAppointments(id: string, startDate: string, endDate: string) {\r\n        return this.dataService.get(this.calendarsApiUrl + 'appointments', { id: id, startDate: startDate, endDate: endDate });\r\n    }\r\n\r\n    getOpenAppointments(id: string, term: string) {\r\n        return this.dataService.get(this.calendarsApiUrl + 'openappointments', { id: id, term: term});\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/angular2-router-loader/src!./Client/modules/+calendars/calendars.service.ts","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, AbstractControl, ValidatorFn, FormArray } from '@angular/forms';\r\nimport { IMyDpOptions } from 'mydatepicker';\r\nimport { UserService } from \"../../shared/services/user.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { NotificationService } from \"../../shared/services/notification.service\";\r\nimport { User } from \"../../shared/models/user.model\";\r\nimport { SelectComponent } from \"ng2-select\";\r\nimport { SelectOption } from \"../../shared/types/select-option\";\r\nimport { CalendarsService } from \"../../+calendars/calendars.service\";\r\nimport { AppointmentAddFormModel } from \"./appointments-add.model\";\r\n\r\n@Component({\r\n    selector: 'appc-appointments-add',\r\n    template: require('./appointments-add.component.html'),\r\n    styles: [require('./appointments-add.component.scss')]\r\n})\r\nexport class AppointmentsAddComponent implements OnInit {\r\n\r\n    constructor(private fb: FormBuilder, private userService: UserService,\r\n        private calendarsService: CalendarsService,\r\n        private notificationService: NotificationService, private router: Router) {\r\n\r\n    }\r\n\r\n    @ViewChild('doctorsInput') doctorsInput: SelectComponent;\r\n    @ViewChild('startingTimeInput') startingTimeInput: SelectComponent;\r\n\r\n    appointmentForm: FormGroup;\r\n\r\n    private myDatePickerOptions: IMyDpOptions = {\r\n        dateFormat: 'mm-dd-yyyy',\r\n    };\r\n\r\n    pets: any[];\r\n\r\n    ngOnInit() {\r\n        this.userService.getUser().subscribe((user: User) => { this.userService.setCurrentUser(user); });\r\n        this.doctorsInput.items = [];\r\n        this.startingTimeInput.items = [];\r\n        this.pets = this.userService.currentUser.pets.map((value, index, array) => {\r\n            return { id: value.id, text: value.name };\r\n        });\r\n        this.appointmentForm = this.fb.group({\r\n            date: ['', [Validators.required]],\r\n            calendarId: ['', [Validators.required]],\r\n            petId: ['', [Validators.required]],\r\n            startingTime: ['', [Validators.required]]\r\n        });\r\n    }\r\n\r\n    onSubmit(): void {\r\n        var data = this.appointmentForm.value;\r\n        var currentUser = this.userService.currentUser;\r\n        var selectedPet = this.pets.filter(x => x.id === data.petId)[0];\r\n        var appointmentAddFormModel = new AppointmentAddFormModel(data.calendarId, data.petId, selectedPet.text, currentUser.id, currentUser.familyName,\r\n            currentUser.givenName, data.date.formatted, data.startingTime.id);\r\n        this.calendarsService.checkappointmentdisponibility(appointmentAddFormModel);\r\n        console.log('Submitted: ' + JSON.stringify(appointmentAddFormModel));\r\n        this.notificationService.success('We successfully received your request to add a new appointment.');\r\n        this.router.navigate(['/pets']);\r\n    }\r\n\r\n    selectedDoctor($event) {\r\n        this.appointmentForm.patchValue({\r\n            calendarId: $event.id\r\n        });\r\n    }\r\n\r\n    removedDoctor($event) {\r\n        this.appointmentForm.patchValue({\r\n            calendarId: ''\r\n        });\r\n    }\r\n\r\n    typedDoctor($event) {\r\n        this.userService.getDoctors($event)\r\n            .subscribe((results: User[]) => {\r\n                this.doctorsInput.items = results.map(result => {\r\n                    return new SelectOption(result.calendarId, result.givenName + ' ' + result.familyName);\r\n                });\r\n                (<any>this.doctorsInput).open()\r\n            });\r\n    }\r\n\r\n\r\n    selectedPet($event) {\r\n        this.appointmentForm.patchValue({\r\n            petId: $event.id\r\n        });\r\n    }\r\n\r\n    removedPet($event) {\r\n        this.appointmentForm.patchValue({\r\n            petId: ''\r\n        });\r\n    }\r\n\r\n    selectedStartingTime($event) {\r\n        this.appointmentForm.patchValue({\r\n            startingTime: $event\r\n        });\r\n    }\r\n\r\n    removedStartingTime($event) {\r\n        this.appointmentForm.patchValue({\r\n            startingTime: ''\r\n        });\r\n    }\r\n\r\n    private generateArray(obj) {\r\n        return Object.keys(obj).map((key) => { return obj[key] });\r\n    }\r\n\r\n    typedStartingTime($event) {\r\n        this.calendarsService.getFreeSpots(this.appointmentForm.controls.calendarId.value, this.appointmentForm.controls.date.value.formatted)\r\n            .map(response => {\r\n                return this.generateArray(response);\r\n            })\r\n            .subscribe((results: string[]) => {\r\n                this.startingTimeInput.items = results;\r\n                (<any>this.startingTimeInput).open()\r\n            });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/angular2-router-loader/src!./Client/modules/+appointments/appointments-add/appointments-add.component.ts","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'appc-appointments-home',\r\n    template: require('./appointments-home.component.html'),\r\n    styles: [require('./appointments-home.component.scss')]\r\n})\r\nexport class AppointmentsHomeComponent implements OnInit {\r\n    cards: any;\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n        this.cards = [\r\n            { route: 'add', title: 'Add', description: 'Add a new appointment', icon: 'fa fa-plus', bg: 'bg-aqua' }\r\n        ];\r\n    }\r\n\r\n}\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/angular2-router-loader/src!./Client/modules/+appointments/appointments-home/appointments-home.component.ts","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, AbstractControl, ValidatorFn, FormArray } from '@angular/forms';\r\nimport { IMyDpOptions } from 'mydatepicker';\r\nimport { UserService } from \"../../shared/services/user.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { NotificationService } from \"../../shared/services/notification.service\";\r\nimport { User } from \"../../shared/models/user.model\";\r\nimport { SelectComponent } from \"ng2-select\";\r\nimport { SelectOption } from \"../../shared/types/select-option\";\r\nimport { CalendarsService } from \"../../+calendars/calendars.service\";\r\nimport { AppointmentManageFormModel } from './appointments-manage.model'\r\nimport { Appointment } from \"../appointment.model\";\r\nimport { AppointmentsService } from \"../appointments.service\";\r\n\r\n@Component({\r\n    selector: 'appc-appointments-manage',\r\n    template: require('./appointments-manage.component.html'),\r\n    styles: [require('./appointments-manage.component.scss')]\r\n})\r\nexport class AppointmentsManageComponent implements OnInit {\r\n\r\n    constructor(private fb: FormBuilder, private userService: UserService,\r\n        private calendarsService: CalendarsService,\r\n        private notificationService: NotificationService,\r\n        private appointmentsService: AppointmentsService, private router: Router) {\r\n\r\n    }\r\n\r\n    @ViewChild('appoitmentsInput') appoitmentsInput: SelectComponent;\r\n\r\n    appointmentManageForm: FormGroup;\r\n\r\n    ngOnInit() {\r\n        this.userService.getUser().subscribe((user: User) => { this.userService.setCurrentUser(user); });\r\n        this.appointmentManageForm = this.fb.group({\r\n            appointmentId: ['', [Validators.required]],\r\n            diagnostic: ['', [Validators.required]],\r\n            medicalHistory: ['', [Validators.required]]\r\n        });\r\n    }\r\n\r\n    onSubmit(): void {\r\n        var data = this.appointmentManageForm.value;\r\n        var currentUser = this.userService.currentUser;\r\n        var appointmentManageFormModel = new AppointmentManageFormModel(data.appointmentId, data.diagnostic, data.medicalHistory);\r\n        this.appointmentsService.finalize(appointmentManageFormModel);\r\n        this.notificationService.success('We successfully received your request to finalize current appointment.');\r\n        this.router.navigate(['/calendars']);\r\n    }\r\n\r\n    selectedAppointment($event) {\r\n        this.appointmentManageForm.patchValue({\r\n            appointmentId: $event.id\r\n        });\r\n    }\r\n\r\n    removedAppointment($event) {\r\n        this.appointmentManageForm.patchValue({\r\n            appointmentId: ''\r\n        });\r\n    }\r\n\r\n    private generateArray(obj) {\r\n        return Object.keys(obj).map((key) => { return obj[key] });\r\n    }\r\n\r\n    private toAppointment(response): Appointment {\r\n        var appointmentId = response[\"Id\"];\r\n        var petName = response[\"PetName\"];\r\n        var petId = response[\"PetId\"];\r\n        var state = response[\"State\"];\r\n        var ownerFamilyName = response[\"OwnerFamilyName\"];\r\n        var ownerGivenName = response[\"OwnerGivenName\"];\r\n        var ownerId = response[\"OwnerId\"];\r\n        var startingTime = new Date(response[\"StartingTime\"]);\r\n        return new Appointment(appointmentId, state, petName, petId,\r\n            ownerFamilyName, ownerGivenName, ownerId, startingTime);\r\n    }\r\n\r\n    typedAppointment($event) {\r\n        this.calendarsService.getOpenAppointments(this.userService.currentUser.calendarId, $event)\r\n            .map(response => {\r\n                var appointments = new Array<Appointment>();\r\n                if (response !== null) {\r\n                    var responseArray = this.generateArray(response);\r\n                    responseArray.forEach((value, index, array) => {\r\n                        appointments.push(this.toAppointment(value));\r\n                    });\r\n                }\r\n                return appointments;\r\n            })\r\n            .subscribe((results: Appointment[]) => {\r\n                this.appoitmentsInput.items = results.map(result => {\r\n                    return new SelectOption(result.id, result.startingTime.toLocaleString() + '-' + result.petName + ' (' + result.ownerGivenName + ' ' + result.ownerFamilyName + ')');\r\n                });\r\n                (<any>this.appoitmentsInput).open()\r\n            });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/angular2-router-loader/src!./Client/modules/+appointments/appointments-manage/appointments-manage.component.ts","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'appc--appointments',\r\n    template: require('./appointments.component.html'),\r\n    styles: [require('./appointments.component.scss')]\r\n})\r\nexport class AppointmentsComponent implements OnInit {\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/angular2-router-loader/src!./Client/modules/+appointments/appointments.component.ts","import { Injectable } from '@angular/core';\r\n\r\nimport { DataService } from '../shared/services/data.service';\r\nimport { AppointmentManageFormModel } from \"./appointments-manage/appointments-manage.model\";\r\n\r\n@Injectable()\r\nexport class AppointmentsService {\r\n\r\n    private appointmentsApiUrl: string = 'api/appointments/';\r\n\r\n    constructor(private dataService: DataService) { }\r\n\r\n    finalize(appointmentManageFormModel: AppointmentManageFormModel) {\r\n        this.dataService.post(this.appointmentsApiUrl, appointmentManageFormModel, {})\r\n            .map(response => { return true }).subscribe((response: Boolean) => { });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/angular2-router-loader/src!./Client/modules/+appointments/appointments.service.ts","\r\nexport class SelectOption {\r\n    constructor(\r\n        public id: string,\r\n        public text: string\r\n    ) {\r\n\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/angular2-router-loader/src!./Client/modules/shared/types/select-option.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <div class=\\\"box box-success\\\">\\r\\n            <div class=\\\"box-header with-border\\\">\\r\\n                <h3 class=\\\"box-title\\\">Add Appointment</h3>\\r\\n            </div>\\r\\n            <!-- /.box-header -->\\r\\n            <!-- form start -->\\r\\n            <form novalidate\\r\\n                  (ngSubmit)=\\\"onSubmit()\\\"\\r\\n                  [formGroup]=\\\"appointmentForm\\\">\\r\\n                <div class=\\\"box-body\\\">\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <div class=\\\"col-sm-6\\\">\\r\\n                            <label>Pet</label>\\r\\n                            <ng-select [items]=\\\"pets\\\" [allowClear]=\\\"true\\\"\\r\\n                                       (selected)=\\\"selectedPet($event)\\\"\\r\\n                                       (removed)=\\\"removedPet($event)\\\"\\r\\n                                       placeholder=\\\"No pet selected\\\">\\r\\n                            </ng-select>\\r\\n                            <span class=\\\"help-block\\\" *ngIf=\\\"(appointmentForm.get('petId').touched ||\\r\\n                                                         appointmentForm.get('petId').dirty) &&\\r\\n                                                         appointmentForm.get('petId').errors\\\">\\r\\n                                <span *ngIf=\\\"appointmentForm.get('petId').errors.required\\\">\\r\\n                                    Please select a pet.\\r\\n                                </span>\\r\\n                            </span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <div class=\\\"col-sm-9\\\">\\r\\n                            <label>Date</label>\\r\\n                            <my-date-picker [options]=\\\"myDatePickerOptions\\\"\\r\\n                                            formControlName=\\\"date\\\"></my-date-picker>\\r\\n                            <span class=\\\"help-block\\\" *ngIf=\\\"(appointmentForm.get('date').touched ||\\r\\n                                                         appointmentForm.get('date').dirty) &&\\r\\n                                                         appointmentForm.get('date').errors\\\">\\r\\n                                <span *ngIf=\\\"appointmentForm.get('date').errors.required\\\">\\r\\n                                    Please enter appointment's date.\\r\\n                                </span>\\r\\n                            </span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <div class=\\\"col-sm-9\\\">\\r\\n                            <label>Doctor</label>\\r\\n                            <ng-select #doctorsInput [allowClear]=\\\"true\\\"\\r\\n                                       (selected)=\\\"selectedDoctor($event)\\\"\\r\\n                                       (removed)=\\\"removedDoctor($event)\\\"\\r\\n                                       (typed)=\\\"typedDoctor($event)\\\"\\r\\n                                       placeholder=\\\"No doctor selected\\\"\\r\\n                                       >\\r\\n                            </ng-select>\\r\\n                            <span class=\\\"help-block\\\" *ngIf=\\\"(appointmentForm.get('calendarId').touched ||\\r\\n                                                         appointmentForm.get('calendarId').dirty) &&\\r\\n                                                         appointmentForm.get('calendarId').errors\\\">\\r\\n                                <span *ngIf=\\\"appointmentForm.get('calendarId').errors.required\\\">\\r\\n                                    Please select a doctor.\\r\\n                                </span>\\r\\n                            </span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <div class=\\\"col-sm-6\\\">\\r\\n                            <label>Starting Time</label>\\r\\n                            <ng-select #startingTimeInput [allowClear]=\\\"true\\\"\\r\\n                                       (selected)=\\\"selectedStartingTime($event)\\\"\\r\\n                                       (removed)=\\\"removedStartingTime($event)\\\"\\r\\n                                       (typed)=\\\"typedStartingTime($event)\\\"\\r\\n                                       placeholder=\\\"No starting time selected\\\">\\r\\n                            </ng-select>\\r\\n                            <span class=\\\"help-block\\\" *ngIf=\\\"(appointmentForm.get('startingTime').touched ||\\r\\n                                                         appointmentForm.get('startingTime').dirty) &&\\r\\n                                                         appointmentForm.get('startingTime').errors\\\">\\r\\n                                <span *ngIf=\\\"appointmentForm.get('startingTime').errors.required\\\">\\r\\n                                    Please select a starting time.\\r\\n                                </span>\\r\\n                            </span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n                        <!-- /.box-body -->\\r\\n\\r\\n                        <div class=\\\"box-footer\\\">\\r\\n                            <div class=\\\"col-xs-12\\\">\\r\\n                                <button class=\\\"btn btn-success\\\"\\r\\n                                        type=\\\"submit\\\"\\r\\n                                        [disabled]=\\\"!appointmentForm.valid\\\">\\r\\n                                    Submit\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </div>\\r\\n</form>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/modules/+appointments/appointments-add/appointments-add.component.html\n// module id = 356\n// module chunks = 2","module.exports = \"\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-4\\\" *ngFor=\\\"let card of cards\\\">\\r\\n        <div class=\\\"info-box\\\">\\r\\n            <a routerLink=\\\"{{card.route}}\\\">\\r\\n                <span class=\\\"info-box-icon {{card.bg}}\\\">\\r\\n                    <i class=\\\"{{card.icon}}\\\"></i>\\r\\n                </span>\\r\\n            </a>\\r\\n            <div class=\\\"info-box-content\\\">\\r\\n                <span class=\\\"info-box-text\\\">{{card.title}}</span>\\r\\n                <span class=\\\"info-box-number\\\">{{card.description}}</span>\\r\\n\\r\\n            </div>\\r\\n            <!-- /.info-box-content -->\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/modules/+appointments/appointments-home/appointments-home.component.html\n// module id = 357\n// module chunks = 2","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <div class=\\\"box box-success\\\">\\r\\n            <div class=\\\"box-header with-border\\\">\\r\\n                <h3 class=\\\"box-title\\\">Manage Appointment</h3>\\r\\n            </div>\\r\\n            <!-- /.box-header -->\\r\\n            <!-- form start -->\\r\\n            <form novalidate\\r\\n                  (ngSubmit)=\\\"onSubmit()\\\"\\r\\n                  [formGroup]=\\\"appointmentManageForm\\\">\\r\\n                <div class=\\\"box-body\\\">\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <div class=\\\"col-sm-6\\\">\\r\\n                            <label>Appointment</label>\\r\\n                            <ng-select #appoitmentsInput [allowClear]=\\\"true\\\"\\r\\n                                       (selected)=\\\"selectedAppointment($event)\\\"\\r\\n                                       (removed)=\\\"removedAppointment($event)\\\"\\r\\n                                       (typed)=\\\"typedAppointment($event)\\\"\\r\\n                                       placeholder=\\\"No appointment selected\\\">\\r\\n                            </ng-select>\\r\\n                            <span class=\\\"help-block\\\" *ngIf=\\\"(appointmentManageForm.get('appointmentId').touched ||\\r\\n                                                         appointmentManageForm.get('appointmentId').dirty) &&\\r\\n                                                         appointmentManageForm.get('appointmentId').errors\\\">\\r\\n                                <span *ngIf=\\\"appointmentForm.get('appointmentId').errors.required\\\">\\r\\n                                    Please select an appointment.\\r\\n                                </span>\\r\\n                            </span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group\\\"\\r\\n                         [ngClass]=\\\"{'has-error': (appointmentManageForm.get('diagnostic').touched ||\\r\\n                                              appointmentManageForm.get('diagnostic').dirty) &&\\r\\n                                              !appointmentManageForm.get('diagnostic').valid }\\\">\\r\\n                        <div class=\\\"col-xs-12\\\">\\r\\n                            <label for=\\\"diagnosticId\\\">Diagnostic</label>\\r\\n                            <textarea class=\\\"form-control\\\" id=\\\"diagnosticId\\\"\\r\\n                                      placeholder=\\\"(Required)\\\"\\r\\n                                      formControlName=\\\"diagnostic\\\"></textarea>\\r\\n                            <span class=\\\"help-block\\\" *ngIf=\\\"(appointmentManageForm.get('diagnostic').touched ||\\r\\n                                                         appointmentManageForm.get('diagnostic').dirty) &&\\r\\n                                                         appointmentManageForm.get('diagnostic').errors\\\">\\r\\n                                <span *ngIf=\\\"appointmentManageForm.get('diagnostic').errors.required\\\">\\r\\n                                    Please enter at least one diagnostic.\\r\\n                                </span>\\r\\n                            </span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group\\\"\\r\\n                         [ngClass]=\\\"{'has-error': (appointmentManageForm.get('medicalHistory').touched ||\\r\\n                                              appointmentManageForm.get('medicalHistory').dirty) &&\\r\\n                                              !appointmentManageForm.get('medicalHistory').valid }\\\">\\r\\n                        <div class=\\\"col-xs-12\\\">\\r\\n                            <label for=\\\"medicalHistoryId\\\">Medical History</label>\\r\\n                            <textarea class=\\\"form-control\\\" id=\\\"medicalHistoryId\\\"\\r\\n                                      placeholder=\\\"(Required)\\\"\\r\\n                                      formControlName=\\\"medicalHistory\\\"></textarea>\\r\\n                            <span class=\\\"help-block\\\" *ngIf=\\\"(appointmentManageForm.get('medicalHistory').touched ||\\r\\n                                                         appointmentManageForm.get('medicalHistory').dirty) &&\\r\\n                                                         appointmentManageForm.get('medicalHistory').errors\\\">\\r\\n                                <span *ngIf=\\\"appointmentManageForm.get('medicalHistory').errors.required\\\">\\r\\n                                    Please enter medical history.\\r\\n                                </span>\\r\\n                            </span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n\\r\\n                </div>\\r\\n                <!-- /.box-body -->\\r\\n\\r\\n                <div class=\\\"box-footer\\\">\\r\\n                    <div class=\\\"col-xs-12\\\">\\r\\n                        <button class=\\\"btn btn-success\\\"\\r\\n                                type=\\\"submit\\\"\\r\\n                                [disabled]=\\\"!appointmentManageForm.valid\\\">\\r\\n                            Submit\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/modules/+appointments/appointments-manage/appointments-manage.component.html\n// module id = 358\n// module chunks = 2","module.exports = \"<router-outlet></router-outlet>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/modules/+appointments/appointments.component.html\n// module id = 359\n// module chunks = 2","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/modules/+appointments/appointments-add/appointments-add.component.scss\n// module id = 366\n// module chunks = 2","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/modules/+appointments/appointments-home/appointments-home.component.scss\n// module id = 367\n// module chunks = 2","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/modules/+appointments/appointments-manage/appointments-manage.component.scss\n// module id = 368\n// module chunks = 2","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/modules/+appointments/appointments.component.scss\n// module id = 369\n// module chunks = 2","export class Appointment {\r\n    constructor(\r\n        public id: string,\r\n        public state: string, \r\n        public petName: string,\r\n        public petId: string,\r\n        public ownerFamilyName: string,\r\n        public ownerGivenName: string,\r\n        public ownerId: string,\r\n        public startingTime: Date\r\n    ) {\r\n\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/angular2-router-loader/src!./Client/modules/+appointments/appointment.model.ts","export class AppointmentAddFormModel {\r\n    constructor(\r\n        public calendarId: string,\r\n        public petId: string,\r\n        public petName: string,\r\n        public ownerId: string,\r\n        public ownerFamilyName: string,\r\n        public ownerGivenName: string,\r\n        public date: string,\r\n        public time: string\r\n    ) {\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/angular2-router-loader/src!./Client/modules/+appointments/appointments-add/appointments-add.model.ts","export class AppointmentManageFormModel {\r\n    constructor(\r\n        public appointmentId: string,\r\n        public diagnostic: string,\r\n        public medicalHistory: string\r\n    ) {\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/angular2-router-loader/src!./Client/modules/+appointments/appointments-manage/appointments-manage.model.ts","import { Routes, RouterModule }  from '@angular/router';\r\n\r\nimport { AppointmentsComponent } from './appointments.component';\r\nimport { AppointmentsHomeComponent } from \"./appointments-home/appointments-home.component\";\r\nimport { AppointmentsAddComponent } from \"./appointments-add/appointments-add.component\";\r\nimport { AppointmentsManageComponent } from \"./appointments-manage/appointments-manage.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: AppointmentsComponent, children: [\r\n            { path: '', component: AppointmentsHomeComponent },\r\n            { path: 'add', component: AppointmentsAddComponent },\r\n            { path: 'manage', component: AppointmentsManageComponent }\r\n        ]\r\n    }  \r\n];\r\n\r\nexport const InternalRouterModule = RouterModule.forChild(routes);\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./~/angular2-router-loader/src!./Client/modules/+appointments/appointments.routes.ts"],"mappings":";;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AAKA;AAIA;AAAA;AAFA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AA1BA;AADA;AAKA;AAJA;AAAA;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AASA;AACA;AACA;AATA;AAaA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AATA;AALA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAJA;AAAA;;;;;;;;;;;;;;;;;;;;ACjBA;AAOA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAVA;AALA;AACA;AACA;AACA;AACA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAtEA;AAAA;AAAA;AAAA;AATA;AALA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AALA;AAAA;;;;;;;;;;;;;;;;;;;;ACnBA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAAA;AANA;AALA;AACA;AACA;AACA;AACA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACPA;AAEA;AAIA;AAIA;AAAA;AAFA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAVA;AADA;AAKA;AAJA;AAAA;;;;;;;;;;;ACLA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAPA;;;;;;;;ACDA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAbA;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAbA;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AARA;;;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;","sourceRoot":""}